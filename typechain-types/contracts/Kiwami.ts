/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface KiwamiInterface extends utils.Interface {
  functions: {
    "BASE_URI()": FunctionFragment;
    "CONTRACT_URI()": FunctionFragment;
    "DA_DECREMENT()": FunctionFragment;
    "DA_DECREMENT_FREQUENCY()": FunctionFragment;
    "DA_ENDING_PRICE()": FunctionFragment;
    "DA_FINAL_PRICE()": FunctionFragment;
    "DA_QUANTITY()": FunctionFragment;
    "DA_STARTING_PRICE()": FunctionFragment;
    "DA_STARTING_TIMESTAMP()": FunctionFragment;
    "INITIAL_FUNDS_WITHDRAWN()": FunctionFragment;
    "MULTISIG_ADDRESS()": FunctionFragment;
    "PUBLIC_WL_MINTED()": FunctionFragment;
    "REMAINING_FUNDS_WITHDRAWN()": FunctionFragment;
    "REVEALED()": FunctionFragment;
    "TEAM_JAPAN_ADDRESS()": FunctionFragment;
    "TEAM_USA_ADDRESS()": FunctionFragment;
    "UNREVEALED_URI()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "currentPrice()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "miceWLStartTime()": FunctionFragment;
    "mintDutchAuction(uint8)": FunctionFragment;
    "mintMouseWL(bytes32[])": FunctionFragment;
    "mintPublicWL(bytes32[])": FunctionFragment;
    "mouseWhitelistMerkleRoot()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "publicWLStartTime()": FunctionFragment;
    "publicWhitelistMerkleRoot()": FunctionFragment;
    "refundExtraETH()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setMouseWhitelistMerkleRoot(bytes32)": FunctionFragment;
    "setPublicWhitelistMerkleRoot(bytes32)": FunctionFragment;
    "setRevealData(bool,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "teamMint(uint256,address)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userToHasMintedMiceWL(address)": FunctionFragment;
    "userToHasMintedPublicWL(address)": FunctionFragment;
    "userToTokenBatchLength(address)": FunctionFragment;
    "userToTokenBatchPriceData(address,uint256)": FunctionFragment;
    "verifyMouseSender(address,bytes32[])": FunctionFragment;
    "verifyPublicSender(address,bytes32[])": FunctionFragment;
    "whitelistURI()": FunctionFragment;
    "withdrawFinalFunds()": FunctionFragment;
    "withdrawInitialFunds()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_URI"
      | "CONTRACT_URI"
      | "DA_DECREMENT"
      | "DA_DECREMENT_FREQUENCY"
      | "DA_ENDING_PRICE"
      | "DA_FINAL_PRICE"
      | "DA_QUANTITY"
      | "DA_STARTING_PRICE"
      | "DA_STARTING_TIMESTAMP"
      | "INITIAL_FUNDS_WITHDRAWN"
      | "MULTISIG_ADDRESS"
      | "PUBLIC_WL_MINTED"
      | "REMAINING_FUNDS_WITHDRAWN"
      | "REVEALED"
      | "TEAM_JAPAN_ADDRESS"
      | "TEAM_USA_ADDRESS"
      | "UNREVEALED_URI"
      | "approve"
      | "balanceOf"
      | "contractURI"
      | "currentPrice"
      | "getApproved"
      | "isApprovedForAll"
      | "miceWLStartTime"
      | "mintDutchAuction"
      | "mintMouseWL"
      | "mintPublicWL"
      | "mouseWhitelistMerkleRoot"
      | "name"
      | "owner"
      | "ownerOf"
      | "publicWLStartTime"
      | "publicWhitelistMerkleRoot"
      | "refundExtraETH"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setContractURI"
      | "setMouseWhitelistMerkleRoot"
      | "setPublicWhitelistMerkleRoot"
      | "setRevealData"
      | "supportsInterface"
      | "symbol"
      | "teamMint"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "userToHasMintedMiceWL"
      | "userToHasMintedPublicWL"
      | "userToTokenBatchLength"
      | "userToTokenBatchPriceData"
      | "verifyMouseSender"
      | "verifyPublicSender"
      | "whitelistURI"
      | "withdrawFinalFunds"
      | "withdrawInitialFunds"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BASE_URI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CONTRACT_URI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DA_DECREMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DA_DECREMENT_FREQUENCY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DA_ENDING_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DA_FINAL_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DA_QUANTITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DA_STARTING_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DA_STARTING_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_FUNDS_WITHDRAWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTISIG_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_WL_MINTED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REMAINING_FUNDS_WITHDRAWN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "REVEALED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TEAM_JAPAN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TEAM_USA_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNREVEALED_URI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "miceWLStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintDutchAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMouseWL",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPublicWL",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mouseWhitelistMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicWLStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicWhitelistMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundExtraETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMouseWhitelistMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicWhitelistMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevealData",
    values: [boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "teamMint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userToHasMintedMiceWL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userToHasMintedPublicWL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userToTokenBatchLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userToTokenBatchPriceData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMouseSender",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPublicSender",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFinalFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInitialFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BASE_URI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONTRACT_URI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DA_DECREMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DA_DECREMENT_FREQUENCY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DA_ENDING_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DA_FINAL_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DA_QUANTITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DA_STARTING_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DA_STARTING_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_FUNDS_WITHDRAWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTISIG_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_WL_MINTED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REMAINING_FUNDS_WITHDRAWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "REVEALED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TEAM_JAPAN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TEAM_USA_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNREVEALED_URI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "miceWLStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintDutchAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintMouseWL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPublicWL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mouseWhitelistMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicWLStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicWhitelistMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundExtraETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMouseWhitelistMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicWhitelistMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevealData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToHasMintedMiceWL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToHasMintedPublicWL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToTokenBatchLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToTokenBatchPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMouseSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPublicSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFinalFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInitialFunds",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Kiwami extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KiwamiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_URI(overrides?: CallOverrides): Promise<[string]>;

    CONTRACT_URI(overrides?: CallOverrides): Promise<[string]>;

    DA_DECREMENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    DA_DECREMENT_FREQUENCY(overrides?: CallOverrides): Promise<[BigNumber]>;

    DA_ENDING_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DA_FINAL_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DA_QUANTITY(overrides?: CallOverrides): Promise<[BigNumber]>;

    DA_STARTING_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DA_STARTING_TIMESTAMP(overrides?: CallOverrides): Promise<[BigNumber]>;

    INITIAL_FUNDS_WITHDRAWN(overrides?: CallOverrides): Promise<[boolean]>;

    MULTISIG_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    PUBLIC_WL_MINTED(overrides?: CallOverrides): Promise<[number]>;

    REMAINING_FUNDS_WITHDRAWN(overrides?: CallOverrides): Promise<[boolean]>;

    REVEALED(overrides?: CallOverrides): Promise<[boolean]>;

    TEAM_JAPAN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    TEAM_USA_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    UNREVEALED_URI(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    currentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    miceWLStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintDutchAuction(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintMouseWL(
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPublicWL(
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mouseWhitelistMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    publicWLStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicWhitelistMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    refundExtraETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      _contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMouseWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevealData(
      _revealed: boolean,
      _unrevealedURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    teamMint(
      quantity: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userToHasMintedMiceWL(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userToHasMintedPublicWL(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userToTokenBatchLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userToTokenBatchPriceData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { pricePaid: BigNumber; quantityMinted: number }
    >;

    verifyMouseSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyPublicSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistURI(overrides?: CallOverrides): Promise<[string]>;

    withdrawFinalFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawInitialFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_URI(overrides?: CallOverrides): Promise<string>;

  CONTRACT_URI(overrides?: CallOverrides): Promise<string>;

  DA_DECREMENT(overrides?: CallOverrides): Promise<BigNumber>;

  DA_DECREMENT_FREQUENCY(overrides?: CallOverrides): Promise<BigNumber>;

  DA_ENDING_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  DA_FINAL_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  DA_QUANTITY(overrides?: CallOverrides): Promise<BigNumber>;

  DA_STARTING_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  DA_STARTING_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

  INITIAL_FUNDS_WITHDRAWN(overrides?: CallOverrides): Promise<boolean>;

  MULTISIG_ADDRESS(overrides?: CallOverrides): Promise<string>;

  PUBLIC_WL_MINTED(overrides?: CallOverrides): Promise<number>;

  REMAINING_FUNDS_WITHDRAWN(overrides?: CallOverrides): Promise<boolean>;

  REVEALED(overrides?: CallOverrides): Promise<boolean>;

  TEAM_JAPAN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  TEAM_USA_ADDRESS(overrides?: CallOverrides): Promise<string>;

  UNREVEALED_URI(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  miceWLStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  mintDutchAuction(
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintMouseWL(
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPublicWL(
    proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mouseWhitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  publicWLStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  publicWhitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;

  refundExtraETH(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    _contractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMouseWhitelistMerkleRoot(
    merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicWhitelistMerkleRoot(
    merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevealData(
    _revealed: boolean,
    _unrevealedURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  teamMint(
    quantity: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userToHasMintedMiceWL(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userToHasMintedPublicWL(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userToTokenBatchLength(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userToTokenBatchPriceData(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { pricePaid: BigNumber; quantityMinted: number }
  >;

  verifyMouseSender(
    userAddress: string,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyPublicSender(
    userAddress: string,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistURI(overrides?: CallOverrides): Promise<string>;

  withdrawFinalFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawInitialFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_URI(overrides?: CallOverrides): Promise<string>;

    CONTRACT_URI(overrides?: CallOverrides): Promise<string>;

    DA_DECREMENT(overrides?: CallOverrides): Promise<BigNumber>;

    DA_DECREMENT_FREQUENCY(overrides?: CallOverrides): Promise<BigNumber>;

    DA_ENDING_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    DA_FINAL_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    DA_QUANTITY(overrides?: CallOverrides): Promise<BigNumber>;

    DA_STARTING_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    DA_STARTING_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_FUNDS_WITHDRAWN(overrides?: CallOverrides): Promise<boolean>;

    MULTISIG_ADDRESS(overrides?: CallOverrides): Promise<string>;

    PUBLIC_WL_MINTED(overrides?: CallOverrides): Promise<number>;

    REMAINING_FUNDS_WITHDRAWN(overrides?: CallOverrides): Promise<boolean>;

    REVEALED(overrides?: CallOverrides): Promise<boolean>;

    TEAM_JAPAN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    TEAM_USA_ADDRESS(overrides?: CallOverrides): Promise<string>;

    UNREVEALED_URI(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    miceWLStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintDutchAuction(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintMouseWL(proof: BytesLike[], overrides?: CallOverrides): Promise<void>;

    mintPublicWL(proof: BytesLike[], overrides?: CallOverrides): Promise<void>;

    mouseWhitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    publicWLStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    publicWhitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;

    refundExtraETH(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_baseURI: string, overrides?: CallOverrides): Promise<void>;

    setContractURI(
      _contractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMouseWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevealData(
      _revealed: boolean,
      _unrevealedURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    teamMint(
      quantity: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userToHasMintedMiceWL(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userToHasMintedPublicWL(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userToTokenBatchLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToTokenBatchPriceData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { pricePaid: BigNumber; quantityMinted: number }
    >;

    verifyMouseSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyPublicSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistURI(overrides?: CallOverrides): Promise<string>;

    withdrawFinalFunds(overrides?: CallOverrides): Promise<void>;

    withdrawInitialFunds(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    BASE_URI(overrides?: CallOverrides): Promise<BigNumber>;

    CONTRACT_URI(overrides?: CallOverrides): Promise<BigNumber>;

    DA_DECREMENT(overrides?: CallOverrides): Promise<BigNumber>;

    DA_DECREMENT_FREQUENCY(overrides?: CallOverrides): Promise<BigNumber>;

    DA_ENDING_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    DA_FINAL_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    DA_QUANTITY(overrides?: CallOverrides): Promise<BigNumber>;

    DA_STARTING_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    DA_STARTING_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_FUNDS_WITHDRAWN(overrides?: CallOverrides): Promise<BigNumber>;

    MULTISIG_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    PUBLIC_WL_MINTED(overrides?: CallOverrides): Promise<BigNumber>;

    REMAINING_FUNDS_WITHDRAWN(overrides?: CallOverrides): Promise<BigNumber>;

    REVEALED(overrides?: CallOverrides): Promise<BigNumber>;

    TEAM_JAPAN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    TEAM_USA_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    UNREVEALED_URI(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    miceWLStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintDutchAuction(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintMouseWL(
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPublicWL(
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mouseWhitelistMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicWLStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    publicWhitelistMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    refundExtraETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      _contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMouseWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevealData(
      _revealed: boolean,
      _unrevealedURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    teamMint(
      quantity: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userToHasMintedMiceWL(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToHasMintedPublicWL(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToTokenBatchLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToTokenBatchPriceData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyMouseSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyPublicSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistURI(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFinalFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawInitialFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_URI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CONTRACT_URI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DA_DECREMENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DA_DECREMENT_FREQUENCY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DA_ENDING_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DA_FINAL_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DA_QUANTITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DA_STARTING_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DA_STARTING_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_FUNDS_WITHDRAWN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MULTISIG_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PUBLIC_WL_MINTED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REMAINING_FUNDS_WITHDRAWN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVEALED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TEAM_JAPAN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TEAM_USA_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNREVEALED_URI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    miceWLStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintDutchAuction(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintMouseWL(
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPublicWL(
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mouseWhitelistMerkleRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicWLStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicWhitelistMerkleRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundExtraETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      _contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMouseWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevealData(
      _revealed: boolean,
      _unrevealedURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamMint(
      quantity: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userToHasMintedMiceWL(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToHasMintedPublicWL(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToTokenBatchLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToTokenBatchPriceData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyMouseSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyPublicSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFinalFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawInitialFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
