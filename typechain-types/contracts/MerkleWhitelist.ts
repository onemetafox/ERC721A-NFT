/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface MerkleWhitelistInterface extends utils.Interface {
  functions: {
    "mouseWhitelistMerkleRoot()": FunctionFragment;
    "owner()": FunctionFragment;
    "publicWhitelistMerkleRoot()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMouseWhitelistMerkleRoot(bytes32)": FunctionFragment;
    "setPublicWhitelistMerkleRoot(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyMouseSender(address,bytes32[])": FunctionFragment;
    "verifyPublicSender(address,bytes32[])": FunctionFragment;
    "whitelistURI()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "mouseWhitelistMerkleRoot"
      | "owner"
      | "publicWhitelistMerkleRoot"
      | "renounceOwnership"
      | "setMouseWhitelistMerkleRoot"
      | "setPublicWhitelistMerkleRoot"
      | "transferOwnership"
      | "verifyMouseSender"
      | "verifyPublicSender"
      | "whitelistURI"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mouseWhitelistMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicWhitelistMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMouseWhitelistMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicWhitelistMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMouseSender",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPublicSender",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistURI",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "mouseWhitelistMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicWhitelistMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMouseWhitelistMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicWhitelistMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMouseSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPublicSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistURI",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MerkleWhitelist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MerkleWhitelistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mouseWhitelistMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    publicWhitelistMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMouseWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyMouseSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyPublicSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistURI(overrides?: CallOverrides): Promise<[string]>;
  };

  mouseWhitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  publicWhitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMouseWhitelistMerkleRoot(
    merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicWhitelistMerkleRoot(
    merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyMouseSender(
    userAddress: string,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyPublicSender(
    userAddress: string,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistURI(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    mouseWhitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    publicWhitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMouseWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyMouseSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyPublicSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistURI(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    mouseWhitelistMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    publicWhitelistMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMouseWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyMouseSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyPublicSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistURI(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    mouseWhitelistMerkleRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicWhitelistMerkleRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMouseWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicWhitelistMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyMouseSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyPublicSender(
      userAddress: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
